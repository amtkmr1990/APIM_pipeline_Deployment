# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - 'pipelines.yml'
    - 'apim_api_deploy.ps1'

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage: Build_Stage
    displayName: Build Stage 

    jobs:
      - job: ApiBuild
        displayName: Api Build 

        steps:
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '5.0.x'
        - task: DotNetCoreCLI@2
          displayName: Restore
          inputs:
            command: restore
            projects: '**/<ProjectPath>.csproj'
        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            projects: '**/<ProjectPath>.csproj'
            arguments: '--configuration $(BuildConfiguration)'  

        - task: DotNetCoreCLI@2
          displayName: Publish
          inputs:
            command: publish
            publishWebProjects: false
            projects: '**/<ProjectPath>.csproj'
            arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory) --no-build'
            zipAfterPublish: false
            modifyOutputPath: false  
 
 # Use the Swashbuckle to generate the swagger file 
 # Else in powershell script we are using curl to download the swagger file 
         - script: | 
             cd $(build.artifactstagingdirectory)
             dotnet new tool-manifest
           displayName: 'Create Tool Manifest'

         - script: |
             cd $(build.artifactstagingdirectory)
             dotnet tool install --version 6.2.3 Swashbuckle.AspNetCore.Cli
           displayName: 'Install Swashbuckle CLI'
    
         - script: |
             echo 'content of ci-build'           
             ls $(build.artifactstagingdirectory)
             cd $(build.artifactstagingdirectory)
             dotnet tool run swagger tofile --output $(build.artifactstagingdirectory)/swagger.json <ProjectAssemblyDLL>.dll v1
           displayName: 'Generate Swagger'
        
        - task: ArchiveFiles@2
          displayName: 'Archive $(Build.StagingDirectory)'
          inputs:
            rootFolderOrFile: '$(Build.StagingDirectory)'
            includeRootFolder: false
            archiveFile: '$(Build.ArtifactStagingDirectory)/Api-$(Build.BuildNumber).zip'
          
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/Api-$(Build.BuildNumber).zip'
          condition: succeededOrFailed()
  
  - stage: Dev
    displayName: API Deploy to Dev
    pool: 'LYB Internal Agent Pool'
    variables:              # passing variable if any 
    - group: Project.API
    - name: ASPNETCORE_ENVIRONMENT
      value: 'Development'
    - name: KeyVault
      value: 'kv-project-dev'
    - name: WebAppName
      value: 'as-projectapi-dev'
    jobs:
      - deployment: Deploy 
        workspace:
          clean: all # what to clean up before the job runs
        environment: API_DEV
        strategy:
          runOnce:
            deploy:
              steps:
              #  this may not be required for all 
              # - task: DownloadPipelineArtifact@2
              #   inputs:
              #     buildType: 'current'
              #     artifactName: 'drop'
              #     targetPath: '$(System.ArtifactsDirectory)'

              - task: AzureRmWebAppDeployment@4
                displayName: 'Deploy Azure App Service'
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: '<Service Connection>'
                  appType: 'webAppLinux'
                  WebAppName: '$(WebAppName)'
                  packageForLinux: '$(Agent.BuildDirectory)/**/*.zip'
                  AppSettings: '-ASPNETCORE_ENVIRONMENT "$(ASPNETCORE_ENVIRONMENT)" -DBSchemaName "$(DBSchemaName)" -KeyVault "$(KeyVault)" -TenantId "$(TenantId)" '

# APIM deployment stage 
  - stage: APIM_DEV
    displayName: APIM_DEV
    pool: 'LYB Internal Agent Pool'
    variables:
    - name: swaggerSourceUrl
      value: 'https://as-projectapi-dev.azurewebsites.net/swagger/v1/swagger.json'
    - name: APIMResourceGroup
      value: '<APIM_RG>'
    - name: APIMName
      value: '<APIM_NAME>'
    - name: backEndUrl
      value: 'https://as-projectapi-dev.azurewebsites.net'  # Change variable value as per your project 
    - name: swaggerTitle
      value: 'Project-DEV' # This name will be displayed when new API is added to APIM 

# this variable may not be required 
#     - name: uIUrl
#       value: 'https://projectui-dev.lyondellbasell.com'

    - name: ApiId
      value: 'project-dev' # Unique name will be displayed when new API is added to APIM 
 
 # below powershell is called for API's deployment on APIM using swagger 
    jobs:
    - job: APIM_API_Deploy
      steps:
        - task: AzurePowerShell@5
          inputs:
            azureSubscription: '<ADO Service Connection>'
            ScriptType: 'FilePath'
            ScriptPath: 'apim_api_deploy.ps1'
            ScriptArguments: '-swaggerSourceUrl $(swaggerSourceUrl) -APIMResourceGroup $(APIMResourceGroup) -APIMName $(APIMName) -backEndUrl $(backEndUrl) -swaggerTitle $(swaggerTitle) -uIUrl $(uIUrl) -ApiId $(ApiId)'
            FailOnStandardError: true
            azurePowerShellVersion: 'LatestVersion'
